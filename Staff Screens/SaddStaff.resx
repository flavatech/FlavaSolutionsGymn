<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="pictureBox1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        jmMAAAAASUVORK5CYII=
</value>
  </data>
</root>